plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.asciidoctor.jvm.convert" version '3.3.2'
}

group = 'com.jay'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'

	implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'snakeyaml' }
	implementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'

	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'com.google.code.gson:gson:2.10.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// https://mvnrepository.com/artifact/net.coobird/thumbnailator
	implementation 'net.coobird:thumbnailator:0.4.19'

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

ext {
	snippetsDir = file('build/generated-snippets')
	docsOutputDir = file("build/docs/asciidoc")
	projectDocsDir = file("src/main/resources/static/docs")
}

tasks.named('test') {
	doFirst {
		delete(snippetsDir)
	}
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	doFirst {
		delete(docsOutputDir)
		delete(projectDocsDir)
	}
	inputs.dir(snippetsDir)
	dependsOn('test')
	doLast {
		copy {
			from docsOutputDir
			into projectDocsDir
		}
	}
}

tasks.named('bootJar') {
	dependsOn('asciidoctor')
}

jar {
	enabled = false
}

compileJava.dependsOn('clean')
